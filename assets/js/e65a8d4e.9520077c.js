"use strict";(self.webpackChunkverkle_dev=self.webpackChunkverkle_dev||[]).push([[699],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=a.createContext({}),m=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=m(e.components);return a.createElement(u.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,u=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=m(n),f=i,h=c["".concat(u,".").concat(f)]||c[f]||s[f]||o;return n?a.createElement(h,r(r({ref:t},p),{},{components:n})):a.createElement(h,r({ref:t},p))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=c;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var m=2;m<o;m++)r[m]=n[m];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9467:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>r,default:()=>s,frontMatter:()=>o,metadata:()=>l,toc:()=>m});var a=n(7462),i=(n(7294),n(3905));const o={},r="Dividing In Lagrange basis when one of the points is zero - Generalised",l={unversionedId:"Theory/dividing_on_zero",id:"Theory/dividing_on_zero",title:"Dividing In Lagrange basis when one of the points is zero - Generalised",description:"Problem",source:"@site/docs/Theory/dividing_on_zero.md",sourceDirName:"Theory",slug:"/Theory/dividing_on_zero",permalink:"/docs/Theory/dividing_on_zero",draft:!1,editUrl:"https://github.com/ethereum/verkle-dev-website/blob/master/docs/Theory/dividing_on_zero.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Lagrange Polynomial",permalink:"/docs/Theory/Math/lagrange polynomial"},next:{title:"IPA Multipoint",permalink:"/docs/Theory/multipoint"}},u={},m=[{value:"Problem",id:"problem",level:2},{value:"Lagrange polynomial",id:"lagrange-polynomial",level:2},{value:"First form of the barycentric interpolation formula",id:"first-form-of-the-barycentric-interpolation-formula",level:2},{value:"Remarks",id:"remarks",level:4},{value:"Re-defining the quotient",id:"re-defining-the-quotient",level:2},{value:"Explicit formulas for each case",id:"explicit-formulas-for-each-case",level:2},{value:"Computing $q_m$",id:"computing-q_m",level:3},{value:"Computing $q_j$",id:"computing-q_j",level:3},{value:"Optimisations",id:"optimisations",level:2},{value:"1. Rewrite $q_m$ in terms of $q_j$",id:"1-rewrite-q_m-in-terms-of-q_j",level:3},{value:"2. Removing field inversions in $q_j$",id:"2-removing-field-inversions-in-q_j",level:3},{value:"3. Precompute $\frac{A&#39;(x_m)}{A&#39;(x_i)}$",id:"3-precompute-fracax_max_i",level:3},{value:"Evaluate polynomial in evaluation form on a point outside of the domain",id:"evaluate-polynomial-in-evaluation-form-on-a-point-outside-of-the-domain",level:2}],p={toc:m};function s(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"dividing-in-lagrange-basis-when-one-of-the-points-is-zero---generalised"},"Dividing In Lagrange basis when one of the points is zero - Generalised"),(0,i.kt)("h2",{id:"problem"},"Problem"),(0,i.kt)("p",null,"We restate the problem, however we do not assume that the elements in the domain are roots of unity."),(0,i.kt)("p",null,"We have $\\frac{f(X)}{g(X)} = \\frac{f(X)}{X - x",(0,i.kt)("em",{parentName:"p"},"m} = \\sum"),"{i=0}^{d-1} {f_i\\frac{\\mathcal{L_i(X)}}{X - x_m}}$"),(0,i.kt)("h2",{id:"lagrange-polynomial"},"Lagrange polynomial"),(0,i.kt)("p",null,"We briefly restate the formula for a lagrange polynomial:"),(0,i.kt)("p",null,"$$\n\\mathcal{L",(0,i.kt)("em",{parentName:"p"},"i}(X) = \\prod"),"{j \\neq i, j = 0}\\frac{X -x_j}{x_i - x_j}\n$$"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"The i'th lagrange polynomial evaluated at $x_i$ is 1 and 0 everywhere else ",(0,i.kt)("strong",{parentName:"p"},"on the domain"))),(0,i.kt)("h2",{id:"first-form-of-the-barycentric-interpolation-formula"},"First form of the barycentric interpolation formula"),(0,i.kt)("p",null,"We introduce the polynomial $A(X) = (X - x_0)(X - x_1)...(X-x_n)$."),(0,i.kt)("p",null,"We also introduce the derivative of $A'(X) = \\sum",(0,i.kt)("em",{parentName:"p"},"{j=0}^{d-1}\\prod"),"{i \\neq j}(X - x_i)$ ."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"You can derive this yourself by generalising the product rule: ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Product_rule#Product_of_more_than_two_factors"},"https://en.wikipedia.org/wiki/Product_rule#Product_of_more_than_two_factors"))),(0,i.kt)("p",null,"In general this derivative does not have a succint/sparse form. We do have a succint form if the domain is the roots of unity!"),(0,i.kt)("p",null,"Now note that $A'(x",(0,i.kt)("em",{parentName:"p"},"j) = \\prod"),"{i=0,i \\neq j}(x_j - x_i)$"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"If we plug in $x_k$ into $A'(X)$ all the terms with $X - x_k$ will vanish, this is why the sum disappears into a single product.")),(0,i.kt)("p",null,"We can use $A$ and $A'$ to re-define our lagrange polynomial as :"),(0,i.kt)("p",null,"$$\n\\mathcal{L_i}(X) = \\frac{A(X)}{A'(x_i) (X - x_i)}\n$$"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Looking at the original lagrange formula, $A'(x_i)$ is the denominator and $\\frac{A(X)}{X - x_i}$ is the numerator.")),(0,i.kt)("p",null,"The first barycentric form for a polynomial $f(X)$ can now be defined as :"),(0,i.kt)("p",null,"$$\nf(X) = \\sum_{i=0}^{d-1}{\\frac{A(X)}{A'(x_i) (X - x_i)} f_i}\n$$"),(0,i.kt)("h4",{id:"remarks"},"Remarks"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"$A(X)$ is not dependent on the values of $f_i$ and so can be brought out of the summation."),(0,i.kt)("li",{parentName:"ul"},"$A'(X)$ is only dependent on the domain, so it can be precomputed, along with $A(X)$")),(0,i.kt)("h2",{id:"re-defining-the-quotient"},"Re-defining the quotient"),(0,i.kt)("p",null,"Note that our original problem was that:"),(0,i.kt)("p",null,"$$\\sum_{i=0}^{d-1} {f_i\\frac{\\mathcal{L_i(X)}}{X - x_m}}$$"),(0,i.kt)("p",null,"Had a $X - x_m$ term in the denominator. We will use the first form as a way to get rid of this."),(0,i.kt)("p",null,"First we rewrite $\\frac{\\mathcal{L_i(X)}}{X - x_m}$ using the first form:"),(0,i.kt)("p",null,"$$\n\\frac{\\mathcal{L_i}(X)}{X - x_m} = \\frac{A(X)}{A'(x_i) (X - x_i)(X-x_m)}\n$$"),(0,i.kt)("p",null,"We then note that:"),(0,i.kt)("p",null,"$$\nA(X) = \\mathcal{L_m}(X) \\cdot A'(x_m) \\cdot (X - x_m)\n$$"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"I just re-arranged the formula for the first form to equal $A(X)$ for $\\mathcal{L_m}(X)$")),(0,i.kt)("p",null,"We can hence plug this into our previous equation:"),(0,i.kt)("p",null,"$$\n\\frac{\\mathcal{L_i}(X)}{X - x_m} = \\frac{\\mathcal{L_m}(X) \\cdot A'(x_m) \\cdot (X - x_m)}{A'(x_i) (X - x_i)(X-x_m)}\n$$"),(0,i.kt)("p",null,"Simplifying since we have a $X - x_m$ in the numerator and denominator:"),(0,i.kt)("p",null,"$$\n\\frac{\\mathcal{L_i}(X)}{X - x_m} = \\frac{A'(x_m) \\cdot \\mathcal{L_m}(X) }{A'(x_i)\\cdot (X - x_i)}\n$$"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"This is the exact same formula that we had in Dankrad's post, but generalised!\nTo see this, we note that when the elements in the domain are roots of unity; $A'(x_k) = d(x^k)^{d-1} = dx^{-k}$"),(0,i.kt)("p",{parentName:"blockquote"},"The nice simplifcation here is due to two reasons: roots of unity form a cyclic group, and we can succintly represent the d'th roots of unity in a sparse equation $X^d -1$ which is nice to derivate.")),(0,i.kt)("p",null,"We have now re-defined $q(X)$ to not include $X-x_m$ !"),(0,i.kt)("p",null,"We now summarise and state that:"),(0,i.kt)("p",null,"$$\nq(X) = \\sum_{i=0}^{d-1} f_i \\frac{\\mathcal{L_i}(X)}{X - x_m} = f_i \\frac{A'(x_m) \\cdot \\mathcal{L_m}(X) }{A'(x_i)\\cdot (X - x_i)}\n$$"),(0,i.kt)("h2",{id:"explicit-formulas-for-each-case"},"Explicit formulas for each case"),(0,i.kt)("h3",{id:"computing-q_m"},"Computing $q_m$"),(0,i.kt)("p",null,"when dealing with the point which vanishes on zero, the above formula becomes:"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Note: $\\mathcal{L_m}(x_m) = 1$")),(0,i.kt)("p",null,"$$\nq",(0,i.kt)("em",{parentName:"p"},"m = q(x_m) = \\sum"),"{i=0}^{d-1}\\frac{A'(x_m)}{A'(x_i)} \\frac{f_i}{x_m - x_i}\n$$"),(0,i.kt)("h3",{id:"computing-q_j"},"Computing $q_j$"),(0,i.kt)("p",null,"For the case that the evaluation does not vanish on the domain, we can use the original formula."),(0,i.kt)("p",null,"For all $j \\neq m$"),(0,i.kt)("p",null,"$$\nq",(0,i.kt)("em",{parentName:"p"},"j = q(x_j) = \\sum"),"{i=0}^{d-1} f_i \\frac{\\mathcal{L_i}(x_j)}{x_j - x_m}\n$$"),(0,i.kt)("p",null,"We note that the terms of the sum are zero, except for when $i=j$, hence we can simplify this to be:"),(0,i.kt)("p",null,"$$\nq_j = \\frac{f_j}{x_j - x_m}\n$$"),(0,i.kt)("h2",{id:"optimisations"},"Optimisations"),(0,i.kt)("p",null,"If we use the formulas as shown above, $q_m$ will take $d$ steps due to the sum, and $q_j$ will take $d-1$ steps. We describe a way to reduce this complexity in the code."),(0,i.kt)("h3",{id:"1-rewrite-q_m-in-terms-of-q_j"},"1. Rewrite $q_m$ in terms of $q_j$"),(0,i.kt)("p",null,"Note that if we multiply $q_m$ by $\\frac{-1}{-1}$ we get:"),(0,i.kt)("p",null,"$$\nq",(0,i.kt)("em",{parentName:"p"},"m = q(x_m) = -\\sum"),"{i=0}^{d-1}\\frac{A'(x_m)}{A'(x_i)} \\frac{f_i}{x_i - x_m}\n$$"),(0,i.kt)("p",null,"We can now substite in $q_i$"),(0,i.kt)("p",null,"$$\nq",(0,i.kt)("em",{parentName:"p"},"m = q(x_m) = -\\sum"),"{i=0}^{d-1}\\frac{A'(x_m)}{A'(x_i)} q_i\n$$"),(0,i.kt)("h3",{id:"2-removing-field-inversions-in-q_j"},"2. Removing field inversions in $q_j$"),(0,i.kt)("p",null,"Note that $q_j$ has a division which is many times more expensive than a field multiplication. We now show a way to precompute in such a way that we do not need to invert elements."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"With the roots of unity, we were able to use the fact that they formed a group.")),(0,i.kt)("p",null,"Again note that:"),(0,i.kt)("p",null,"$$\nq_j = \\frac{f_j}{x_j - x_m}\n$$"),(0,i.kt)("p",null,"(Dankrad):"),(0,i.kt)("p",null,"For our case where the domain is the discrete interval $","[0, 255]","$"),(0,i.kt)("p",null,"We only need to precompute $\\frac{1}{x_i}$ for $x_i \\in ","[-255, 255]","$. This is 510 values, so we would store 510 * 32 = 16Kb."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"How would I lookup these values?")),(0,i.kt)("p",null,"First we imagine that we have stored the values in an array:"),(0,i.kt)("p",null,"$","[\\frac{1}{1}, \\frac{1}{2}, \\frac{1}{3}, \\frac{1}{4}... \\frac{1}{255},\\frac{1}{-1},\\frac{1}{-2},...\\frac{1}{-255}]","$"),(0,i.kt)("p",null,"We first note that we can easily get from $\\frac{1}{k}$ to $\\frac{1}{-k}$ in the array by jumping forward 255 indices. Our strategy will be to find $\\frac{1}{k}$ then jump to $\\frac{1}{k}$ if we need to."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("p",null,"We want to compute $\\frac{1}{0 - 255}$."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Compute the $abs(0-255) = 255 = i$")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"In practice, we can use an if statement to check whether 255 or 0 is larger, and subtract accordingly.")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Note that $\\frac{1}{i}$ is at index $i-1$"),(0,i.kt)("li",{parentName:"ul"},"Since our original computation was $0 - 255$ which is negative, we need to get the element at index $i - 1 + 255$")),(0,i.kt)("h3",{id:"3-precompute-fracax_max_i"},"3. Precompute $\\frac{A'(x_m)}{A'(x_i)}$"),(0,i.kt)("p",null,"With the roots of unity, we did not need this optimisation as $\\frac{A'(x_m)}{A'(x_i)}$ equaled $\\frac{\\omega^i}{\\omega^m}$ which was trivial to fetch from the domain."),(0,i.kt)("p",null,"For this, we will need to store precomputed values, if we want to efficiently compute $q_m$ in $O(d)$ steps, and to also avoid inversions."),(0,i.kt)("p",null,"(Dankrad): We precompute $A'(x_i)$ and $\\frac{1}{A'(x_i)}$. Given that we have 256 points in the domain. This will cost us 256 ",(0,i.kt)("em",{parentName:"p"},"2")," 32 bytes = 16kB."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"How would I lookup these values?")),(0,i.kt)("p",null,"Similar to the previous optimisation, we store $A'(x_i)$ in an array."),(0,i.kt)("p",null,"$","[A'(0), A'(1), A'(2), A'(3)... A'(255),\\frac{1}{A'(0)},\\frac{1}{A'(1)},\\frac{1}{A'(2)},...\\frac{1}{A'(255)}]","$"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("p",null,"We want to compute $\\frac{A'(0)}{A'(5)}$"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"We can fetch $A'(0)$ by looking up the element at index $0$ in the array."),(0,i.kt)("li",{parentName:"ul"},"We can fetch $\\frac{1}{A'(5)}$ by looking up the element at index 5, then jumping forward 256 positions.")),(0,i.kt)("p",null,"In general:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"To fetch $A(x_i)$ we need to fetch the element at index $i$"),(0,i.kt)("li",{parentName:"ul"},"To fetch $\\frac{1}{A(x_i)}$ we need to fetch the element at index $i + 256$")),(0,i.kt)("h2",{id:"evaluate-polynomial-in-evaluation-form-on-a-point-outside-of-the-domain"},"Evaluate polynomial in evaluation form on a point outside of the domain"),(0,i.kt)("p",null,"Suppose $z$ is a point outside of the domain."),(0,i.kt)("p",null,"$$\nf(z) = \\sum",(0,i.kt)("em",{parentName:"p"},"{i=0}^{d-1}f_i\\mathcal{L_i}(z) = \\sum"),"{i=0}^{d-1}{\\frac{A(z)}{A'(x",(0,i.kt)("em",{parentName:"p"},"i) (z - x_i)} f_i} = A(z)\\sum"),"{i=0}^{d-1}\\frac{f_i}{A'(x_i)(z-x_i)}\n$$"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"We already store precomputations for $\\frac{1}{A'(x_i)}$"),(0,i.kt)("li",{parentName:"ul"},"We should compute $z-x_i$ separately, then batch invert using the montgomery trick, so that we only pay for one inversion.")))}s.isMDXComponent=!0}}]);